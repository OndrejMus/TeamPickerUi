@page "/teams"
@inject ITeamStorage teamStorage

<div style="display:flex; flex-wrap: wrap; justify-content: center;">
    <h3>Team picker</h3>
</div>

<div style="display:flex; flex-wrap: wrap; justify-content: center;">
    

    <div style="display: inline-block;">
        <AddMemberComponent />
    </div>
    <div style="display: inline-block;">
        <AddTeamComponent />
    </div>
</div>

<div style="display:flex; flex-wrap: wrap; justify-content: center;">
    <div>
        <h3>Members</h3>
        <MembersComponent />
    </div>
</div>
 
<div style="display:flex; flex-wrap: wrap; justify-content: center;">
    <h3 style="margin: 0px 10px">Teams</h3>
    <EditForm Model="teamStorage" OnValidSubmit="@RandomizeTeams">
        <FluentValidationValidator TValidator="Validation_TeamStorage" />
        <ValidationSummary />
        <button type="submit" class="btn btn-primary">Randomize teams</button>
    </EditForm>
</div>

<div style="display:flex; flex-wrap: wrap; justify-content: center;">
    <TeamComponent />
</div>






@code {
    protected override void OnInitialized()
    {
        teamStorage.StorageUpdated += UpdateUi;
    }

    private void UpdateUi()
    {
        // Update UI logic here
        StateHasChanged();
    }

    // Don't forget to unsubscribe when the component is disposed
    public void Dispose()
    {
        teamStorage.StorageUpdated -= UpdateUi;
    }

    public async Task RandomizeTeams()
    {
        teamStorage.RandomizeTeams();
    }

}
