@using FluentValidation
@inject ITeamStorage teamStorage

<h3>Add member</h3>

<EditForm Model="member" OnValidSubmit="@AddMember" >
    @* <DataAnnotationsValidator /> *@
    <FluentValidationValidator TValidator="Validation_Member" />
    <ValidationSummary /> 

    @* <InputText id="memberName" @bind-Value="member.Name" autocomplete="off" ></InputText> *@

    <label for="memberName">Member name:</label>
    <input type="text" @ref="nameInputRef" maxlength="30" placeholder="Set member name" id="memberName" @bind="member.Name" autocomplete="off"><br>
    
    
    <label for="member">Member rating:</label>
    <input type="number" id="memberRating" @bind="member.Rating" autocomplete="off"><br>
    @* min="1" max="10000" *@

    <TeamPickerUi.Components.ColorPicker.ColorPickerComponent Alpha="255" RandomColor=true @bind-ColorHex="member.MemberColorHex" />
    
    <button type="submit" class="btn btn-primary">Add</button>

</EditForm>


@code {
    private MemberModel member;
    private ElementReference nameInputRef;
    private ElementReference editFormRef;

    protected override void OnInitialized()
    {
        member = new MemberModel(teamStorage);
        base.OnInitialized();
    }

    private async Task AddMember()
    {
        teamStorage.AddMember(member);

        member = new MemberModel(teamStorage);

        StateHasChanged();
        await nameInputRef.FocusAsync();
        
    }

}
