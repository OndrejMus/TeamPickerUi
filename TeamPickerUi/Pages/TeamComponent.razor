@inject ITeamStorage teamStorage;

<div class="teams-container">
    @foreach (var team in teamStorage.Teams)
    {
            <div class="team" style="border-color: @team.TeamColorHex">
            <h5>@team.Name (@team.GetTeamRating(), W:L @team.WinCount:@team.LossCount) <button class="button" @onclick="@(e => DeleteTeam(team))">X</button></h5>
            <button class="button" @onclick="@(e => teamStorage.SetWiningTeam(team))">Win!</button>
                
                @foreach (var member in team.Members)
                {
                    <MemberComponent Member="member"></MemberComponent>
                }
            </div>        
    }
</div>



@code {
    protected override void OnInitialized()
    {
        teamStorage.StorageUpdated += UpdateUi;
    }

    private void UpdateUi()
    {
        // Update UI logic here
        StateHasChanged();
    }

    // Don't forget to unsubscribe when the component is disposed
    public void Dispose()
    {
        teamStorage.StorageUpdated -= UpdateUi;
    }

    public void DeleteTeam(TeamModel team)
    {
        teamStorage.DeleteTeam(team);
    }
}
